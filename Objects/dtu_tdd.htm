<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\dtu_tdd.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\dtu_tdd.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Dec 15 23:27:41 2017
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ConfigSystemProcess &rArr; Config_server &rArr; dtu_conf &rArr; fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[36]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">rt_alloc_box</a><BR>
 <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[91]">ADC_50ms</a> from adc.o(i.ADC_50ms) referenced from main.o(i.main)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">ConfigSystemProcess</a> from dtu.o(i.ConfigSystemProcess) referenced from dtu.o(i.ConfigSystem_ctor)
 <LI><a href="#[6a]">Construct</a> from dtu.o(i.Construct) referenced from dtu.o(i.StateContext_ctor)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from adc.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from gprs_uart.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from serial485_uart.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from serial485_uart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">DtucreateContext</a> from dtu.o(i.DtucreateContext) referenced from dtu.o(i.DtuContextFactory_ctor)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">Emptyprocess</a> from dtu.o(i.Emptyprocess) referenced from dtu.o(i.EmptyProcess_ctor)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">ForwardNetProcess</a> from dtu.o(i.ForwardNetProcess) referenced from dtu.o(i.ForwardNet_ctor)
 <LI><a href="#[3e]">ForwardSMSProcess</a> from dtu.o(i.ForwardSMSProcess) referenced from dtu.o(i.ForwardSMS_ctor)
 <LI><a href="#[3f]">ForwardSer485Process</a> from dtu.o(i.ForwardSer485Process) referenced from dtu.o(i.ForwardSer485_ctor)
 <LI><a href="#[40]">GprsCnntManagerRun</a> from dtu.o(i.GprsCnntManagerRun) referenced from dtu.o(i.GprsCnntManagerState_ctor)
 <LI><a href="#[41]">GprsConnectRun</a> from dtu.o(i.GprsConnectRun) referenced from dtu.o(i.GprsConnectState_ctor)
 <LI><a href="#[43]">GprsDealSMSRun</a> from dtu.o(i.GprsDealSMSRun) referenced from dtu.o(i.GprsDealSMSState_ctor)
 <LI><a href="#[45]">GprsEventHandleRun</a> from dtu.o(i.GprsEventHandleRun) referenced from dtu.o(i.GprsEventHandleState_ctor)
 <LI><a href="#[46]">GprsHeatBeatRun</a> from dtu.o(i.GprsHeatBeatRun) referenced from dtu.o(i.GprsHeatBeatState_ctor)
 <LI><a href="#[8f]">GprsRun</a> from gprs.o(i.GprsRun) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[47]">GprsSelfTestRun</a> from dtu.o(i.GprsSelfTestRun) referenced from dtu.o(i.GprsSelfTestState_ctor)
 <LI><a href="#[49]">GprsShutdown</a> from cdma_dtu.o(i.GprsShutdown) referenced from cdma_dtu.o(i.Init_ThrdDtu)
 <LI><a href="#[83]">Gprs_Event_smsRecv</a> from gprs.o(i.Gprs_Event_smsRecv) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[82]">Gprs_Event_tcpRecv</a> from gprs.o(i.Gprs_Event_tcpRecv) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[81]">Gprs_Event_tcpclose</a> from gprs.o(i.Gprs_Event_tcpclose) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[78]">Gprs_check_simCard</a> from gprs.o(i.Gprs_check_simCard) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[77]">Gprs_get_info</a> from gprs.o(i.Gprs_get_info) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[72]">Gprs_init</a> from gprs.o(i.Gprs_init) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[90]">Led_job</a> from main.o(i.Led_job) referenced from main.o(i.main)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4e]">ModbusBusinessProcess</a> from dtu.o(i.ModbusBusinessProcess) referenced from dtu.o(i.ModbusBusiness_ctor)
 <LI><a href="#[4a]">ModbusRTURegTpye3_wrCB</a> from rtu.o(i.ModbusRTURegTpye3_wrCB) referenced from rtu.o(i.Init_rtu)
 <LI><a href="#[2]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[55]">PThrInitState</a> from dtu.o(i.PThrInitState) referenced from dtu.o(i.PassThroughModeContext_ctor)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[50]">PassThroughModeBuildGprsConnectState</a> from dtu.o(i.PassThroughModeBuildGprsConnectState) referenced from dtu.o(i.PassThroughModeBuilder_ctor)
 <LI><a href="#[52]">PassThroughModeBuildGprsDealSMSState</a> from dtu.o(i.PassThroughModeBuildGprsDealSMSState) referenced from dtu.o(i.PassThroughModeBuilder_ctor)
 <LI><a href="#[51]">PassThroughModeBuildGprsEventHandleState</a> from dtu.o(i.PassThroughModeBuildGprsEventHandleState) referenced from dtu.o(i.PassThroughModeBuilder_ctor)
 <LI><a href="#[4f]">PassThroughModeBuildGprsSelfTestState</a> from dtu.o(i.PassThroughModeBuildGprsSelfTestState) referenced from dtu.o(i.PassThroughModeBuilder_ctor)
 <LI><a href="#[54]">PassThroughModeBuilderGprsCnntManagerState</a> from dtu.o(i.PassThroughModeBuilderGprsCnntManagerState) referenced from dtu.o(i.PassThroughModeBuilder_ctor)
 <LI><a href="#[53]">PassThroughModeBuilderGprsHeatBeatState</a> from dtu.o(i.PassThroughModeBuilderGprsHeatBeatState) referenced from dtu.o(i.PassThroughModeBuilder_ctor)
 <LI><a href="#[9]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[57]">RRTUBuildGprsConnectState</a> from dtu.o(i.RRTUBuildGprsConnectState) referenced from dtu.o(i.RemoteRTUModeBuilder_ctor)
 <LI><a href="#[59]">RRTUBuildGprsDealSMSState</a> from dtu.o(i.RRTUBuildGprsDealSMSState) referenced from dtu.o(i.RemoteRTUModeBuilder_ctor)
 <LI><a href="#[58]">RRTUBuildGprsEventHandleState</a> from dtu.o(i.RRTUBuildGprsEventHandleState) referenced from dtu.o(i.RemoteRTUModeBuilder_ctor)
 <LI><a href="#[56]">RRTUBuildGprsSelfTestState</a> from dtu.o(i.RRTUBuildGprsSelfTestState) referenced from dtu.o(i.RemoteRTUModeBuilder_ctor)
 <LI><a href="#[5b]">RRTUBuilderGprsCnntManagerState</a> from dtu.o(i.RRTUBuilderGprsCnntManagerState) referenced from dtu.o(i.RemoteRTUModeBuilder_ctor)
 <LI><a href="#[5a]">RRTUBuilderGprsHeatBeatState</a> from dtu.o(i.RRTUBuilderGprsHeatBeatState) referenced from dtu.o(i.RemoteRTUModeBuilder_ctor)
 <LI><a href="#[5c]">RRTUInitState</a> from dtu.o(i.RRTUInitState) referenced from dtu.o(i.RemoteRTUModeContext_ctor)
 <LI><a href="#[34]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4d]">Read_rtualarm</a> from rtu.o(i.Read_rtualarm) referenced from rtu.o(i.Init_rtu)
 <LI><a href="#[4c]">Read_rtursv</a> from rtu.o(i.Read_rtursv) referenced from rtu.o(i.Init_rtu)
 <LI><a href="#[4b]">Read_rtuval</a> from rtu.o(i.Read_rtuval) referenced from rtu.o(i.Init_rtu)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5d]">RtuInit</a> from rtu.o(i.RtuInit) referenced from rtu.o(i.RtuInstance_ctor)
 <LI><a href="#[5e]">RtuRun</a> from rtu.o(i.RtuRun) referenced from rtu.o(i.RtuInstance_ctor)
 <LI><a href="#[42]">SMSConfigSystem_ack</a> from dtu.o(i.SMSConfigSystem_ack) referenced from dtu.o(i.GprsDealSMSRun)
 <LI><a href="#[42]">SMSConfigSystem_ack</a> from dtu.o(i.SMSConfigSystem_ack) referenced from dtu.o(i.GprsEventHandleRun)
 <LI><a href="#[66]">SMSInitState</a> from dtu.o(i.SMSInitState) referenced from dtu.o(i.SMSModeContext_ctor)
 <LI><a href="#[61]">SMSModeBuildGprsConnectState</a> from dtu.o(i.SMSModeBuildGprsConnectState) referenced from dtu.o(i.SMSModeBuilder_ctor)
 <LI><a href="#[63]">SMSModeBuildGprsDealSMSState</a> from dtu.o(i.SMSModeBuildGprsDealSMSState) referenced from dtu.o(i.SMSModeBuilder_ctor)
 <LI><a href="#[62]">SMSModeBuildGprsEventHandleState</a> from dtu.o(i.SMSModeBuildGprsEventHandleState) referenced from dtu.o(i.SMSModeBuilder_ctor)
 <LI><a href="#[60]">SMSModeBuildGprsSelfTestState</a> from dtu.o(i.SMSModeBuildGprsSelfTestState) referenced from dtu.o(i.SMSModeBuilder_ctor)
 <LI><a href="#[65]">SMSModeBuilderGprsCnntManagerState</a> from dtu.o(i.SMSModeBuilderGprsCnntManagerState) referenced from dtu.o(i.SMSModeBuilder_ctor)
 <LI><a href="#[64]">SMSModeBuilderGprsHeatBeatState</a> from dtu.o(i.SMSModeBuilderGprsHeatBeatState) referenced from dtu.o(i.SMSModeBuilder_ctor)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from spi.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5f]">Ser485ModbusAckCB</a> from dtu.o(i.Ser485ModbusAckCB) referenced from rtu.o(i.RtuRun)
 <LI><a href="#[67]">StateContextInit</a> from dtu.o(i.StateContextInit) referenced from dtu.o(i.StateContext_ctor)
 <LI><a href="#[a]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from times.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">TcpModbusAckCB</a> from dtu.o(i.TcpModbusAckCB) referenced from dtu.o(i.GprsEventHandleRun)
 <LI><a href="#[aa]">Thread_rtu</a> from thread_rtu.o(i.Thread_rtu) referenced from thread_rtu.o(.constdata)
 <LI><a href="#[a6]">Turnoff</a> from led.o(i.Turnoff) referenced from led.o(i.stm32LED_ctor)
 <LI><a href="#[a5]">Turnon</a> from led.o(i.Turnon) referenced from led.o(i.stm32LED_ctor)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from serial485_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from gprs_uart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6d]">WorkStatePrint</a> from dtu.o(i.WorkStatePrint) referenced from dtu.o(i.WorkState_ctor)
 <LI><a href="#[6c]">WorkStateTestInit</a> from dtu.o(i.WorkStateTestInit) referenced from dtu.o(i.WorkState_ctor)
 <LI><a href="#[39]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[6f]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[a3]">blink</a> from led.o(i.blink) referenced from led.o(i.stm32LED_ctor)
 <LI><a href="#[7d]">buf_test</a> from gprs.o(i.buf_test) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[7c]">delete_sms</a> from gprs.o(i.delete_sms) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[6e]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[71]">free</a> from malloc.o(i.free) referenced from sw_filesys.o(i.filesys_init)
 <LI><a href="#[7f]">get_apn</a> from gprs.o(i.get_apn) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[85]">get_firstCnt_seq</a> from gprs.o(i.get_firstCnt_seq) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[84]">get_firstDiscnt_seq</a> from gprs.o(i.get_firstDiscnt_seq) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[a2]">init_led</a> from led.o(i.init_led) referenced from led.o(i.stm32LED_ctor)
 <LI><a href="#[a4]">led_destory</a> from led.o(i.led_destory) referenced from led.o(i.stm32LED_ctor)
 <LI><a href="#[73]">lock</a> from gprs.o(i.lock) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[70]">mach_file</a> from sw_filesys.o(i.mach_file) referenced from sw_filesys.o(i.filesys_init)
 <LI><a href="#[0]">main</a> from main.o(i.main) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[68]">nextState</a> from dtu.o(i.nextState) referenced from dtu.o(i.StateContext_ctor)
 <LI><a href="#[a8]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[ab]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[a1]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[48]">read_event</a> from gprs.o(i.read_event) referenced from gprs.o(i.Gprs_init)
 <LI><a href="#[7a]">read_phnNmbr_TextSMS</a> from gprs.o(i.read_phnNmbr_TextSMS) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[7b]">read_seq_TextSMS</a> from gprs.o(i.read_seq_TextSMS) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[86]">read_smscAddr</a> from gprs.o(i.read_smscAddr) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[8d]">recvform_tcp</a> from gprs.o(i.recvform_tcp) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[80]">report_event</a> from gprs.o(i.report_event) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[36]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[37]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[79]">send_text_sms</a> from gprs.o(i.send_text_sms) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[8b]">sendto_tcp</a> from gprs.o(i.sendto_tcp) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[8c]">sendto_tcp_buf</a> from gprs.o(i.sendto_tcp_buf) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[69]">setCurState</a> from dtu.o(i.setCurState) referenced from dtu.o(i.StateContext_ctor)
 <LI><a href="#[88]">set_dns_ip</a> from gprs.o(i.set_dns_ip) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[87]">set_smscAddr</a> from gprs.o(i.set_smscAddr) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[76]">shutdown</a> from gprs.o(i.shutdown) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[7e]">sms_test</a> from gprs.o(i.sms_test) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[75]">startup</a> from gprs.o(i.startup) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[92]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[93]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[94]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[95]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[96]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[97]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[98]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[99]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[9a]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[9b]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[9c]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[9d]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[9e]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[9f]">svcThreadYield</a> from rt_cmsis.o(i.svcThreadYield) referenced from rt_cmsis.o(i.osThreadYield)
 <LI><a href="#[a0]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[6b]">switchToSmsMode</a> from dtu.o(i.switchToSmsMode) referenced from dtu.o(i.StateContext_ctor)
 <LI><a href="#[89]">tcpClose</a> from gprs.o(i.tcpClose) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[8e]">tcp_test</a> from gprs.o(i.tcp_test) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[8a]">tcpip_cnnt</a> from gprs.o(i.tcpip_cnnt) referenced from gprs.o(i.gprs_t_ctor)
 <LI><a href="#[a7]">test</a> from led.o(i.test) referenced from led.o(i.stm32LED_ctor)
 <LI><a href="#[a9]">thrd_dtu</a> from cdma_dtu.o(i.thrd_dtu) referenced from cdma_dtu.o(.constdata)
 <LI><a href="#[74]">unlock</a> from gprs.o(i.unlock) referenced from gprs.o(i.gprs_t_ctor)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ac]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[241]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[242]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[243]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[244]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ae]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[245]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[21a]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[246]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[247]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[248]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp_buf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_test
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_test
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBufData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSRun
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_para_init
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a6]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[130]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_smscAddr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns_ip
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_smscAddr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seq_TextSMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_sms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_check_simCard
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sms2TextMode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_ip
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_get_info
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_begin
</UL>

<P><STRONG><a name="[ec]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_test
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_phoneNO
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_phNO
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prnt_485
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatRun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerRun
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_485
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_begin
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_str
</UL>

<P><STRONG><a name="[1a5]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_mount
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchfile
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sarch_finleinfo_and_return_curpage
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_file
</UL>

<P><STRONG><a name="[122]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_smscAddr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_smscAddr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_apn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_check_simCard
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sms2TextMode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_ip
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_get_info
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TTCPVer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerRun
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_format
</UL>

<P><STRONG><a name="[1ab]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[121]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_phNO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_begin
</UL>

<P><STRONG><a name="[bd]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[24f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[250]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[251]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[252]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[c1]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[c9]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[253]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[d2]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[d4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[254]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>ADCValUpdate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, adc.o(i.ADCValUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCValUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinishCollect
</UL>

<P><STRONG><a name="[91]"></a>ADC_50ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adc.o(i.ADC_50ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_50ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d6]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_50ms
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1d6]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1da]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1d8]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1d4]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1d5]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1d7]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[d5]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_50ms
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1d3]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[1e9]"></a>CRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modbusrtu_cli.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU_data
</UL>

<P><STRONG><a name="[d7]"></a>Calculate</STRONG> (Thumb, 11772 bytes, Stack size 80 bytes, adc.o(i.Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinishCollect
</UL>

<P><STRONG><a name="[e0]"></a>Collect_job</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(i.Collect_job))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Collect_job &rArr; FinishCollect &rArr; Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinishCollect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealwithCollect
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>ConfigSystemProcess</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dtu.o(i.ConfigSystemProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ConfigSystemProcess &rArr; Config_server &rArr; dtu_conf &rArr; fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.ConfigSystem_ctor)
</UL>
<P><STRONG><a name="[e6]"></a>ConfigSystem_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.ConfigSystem_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystem_new
</UL>

<P><STRONG><a name="[e4]"></a>ConfigSystem_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.ConfigSystem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigSystem_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystem_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigSystem
</UL>

<P><STRONG><a name="[e7]"></a>Config_job</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, dtuconfig.o(i.Config_job))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Config_job &rArr; dtu_conf &rArr; fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TTCPVer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_TTCP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_finish
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_begin
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>Config_server</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dtuconfig.o(i.Config_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Config_server &rArr; dtu_conf &rArr; fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_finish
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_begin
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystemProcess
</UL>

<P><STRONG><a name="[6a]"></a>Construct</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dtu.o(i.Construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Construct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.StateContext_ctor)
</UL>
<P><STRONG><a name="[f1]"></a>DCFctGetInstance</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dtu.o(i.DCFctGetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCFctGetInstance &rArr; DtuContextFactory_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtuContextFactory_new
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThrdDtu
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; DMA1_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Configuration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gprs_uart.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, serial485_uart.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_loadbuflen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, serial485_uart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
</UL>

<P><STRONG><a name="[f4]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Configuration
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
</UL>

<P><STRONG><a name="[fd]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Configuration
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
</UL>

<P><STRONG><a name="[fa]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinishCollect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealwithCollect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Configuration
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
</UL>

<P><STRONG><a name="[fe]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Configuration
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
</UL>

<P><STRONG><a name="[105]"></a>Data_Deal</STRONG> (Thumb, 1350 bytes, Stack size 20 bytes, adc.o(i.Data_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Data_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealwithCollect
</UL>

<P><STRONG><a name="[107]"></a>DtuContextFactory_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.DtuContextFactory_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtuContextFactory_new
</UL>

<P><STRONG><a name="[f2]"></a>DtuContextFactory_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.DtuContextFactory_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DtuContextFactory_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtuContextFactory_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCFctGetInstance
</UL>

<P><STRONG><a name="[3b]"></a>DtucreateContext</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dtu.o(i.DtucreateContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DtucreateContext &rArr; SMSModeContext_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeContext_new
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeContext_new
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeContext_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.DtuContextFactory_ctor)
</UL>
<P><STRONG><a name="[10c]"></a>EmptyProcess_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.EmptyProcess_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyProcess_new
</UL>

<P><STRONG><a name="[10b]"></a>EmptyProcess_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.EmptyProcess_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EmptyProcess_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyProcess_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyProcess
</UL>

<P><STRONG><a name="[3c]"></a>Emptyprocess</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dtu.o(i.Emptyprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Emptyprocess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.EmptyProcess_ctor)
</UL>
<P><STRONG><a name="[3d]"></a>ForwardNetProcess</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, dtu.o(i.ForwardNetProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ForwardNetProcess &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alarmclock_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.ForwardNet_ctor)
</UL>
<P><STRONG><a name="[111]"></a>ForwardNet_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.ForwardNet_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardNet_new
</UL>

<P><STRONG><a name="[110]"></a>ForwardNet_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.ForwardNet_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ForwardNet_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardNet_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardNet
</UL>

<P><STRONG><a name="[3e]"></a>ForwardSMSProcess</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, dtu.o(i.ForwardSMSProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ForwardSMSProcess &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.ForwardSMS_ctor)
</UL>
<P><STRONG><a name="[113]"></a>ForwardSMS_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.ForwardSMS_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSMS_new
</UL>

<P><STRONG><a name="[112]"></a>ForwardSMS_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.ForwardSMS_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ForwardSMS_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSMS_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardSMS
</UL>

<P><STRONG><a name="[3f]"></a>ForwardSer485Process</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dtu.o(i.ForwardSer485Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ForwardSer485Process &rArr; s485_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.ForwardSer485_ctor)
</UL>
<P><STRONG><a name="[115]"></a>ForwardSer485_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.ForwardSer485_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSer485_new
</UL>

<P><STRONG><a name="[114]"></a>ForwardSer485_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.ForwardSer485_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ForwardSer485_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSer485_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardSer485
</UL>

<P><STRONG><a name="[116]"></a>GPIO_Configuration</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, chipset.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init_spi
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init_cs
</UL>

<P><STRONG><a name="[118]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turnon
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_select
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;series_se
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
</UL>

<P><STRONG><a name="[18d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_destory
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turnoff
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_select
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;series_se
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_erase
</UL>

<P><STRONG><a name="[119]"></a>GetConfigSystem</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dtu.o(i.GetConfigSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetConfigSystem &rArr; ConfigSystem_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsEventHandleState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsDealSMSState
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsEventHandleState
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsDealSMSState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsEventHandleState
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsDealSMSState
</UL>

<P><STRONG><a name="[11a]"></a>GetEmptyProcess</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dtu.o(i.GetEmptyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetEmptyProcess &rArr; EmptyProcess_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyProcess_new
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsEventHandleState
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsEventHandleState
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsDealSMSState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsEventHandleState
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsDealSMSState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInit
</UL>

<P><STRONG><a name="[11b]"></a>GetForwardNet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dtu.o(i.GetForwardNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetForwardNet &rArr; ForwardNet_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardNet_new
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsEventHandleState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInit
</UL>

<P><STRONG><a name="[11c]"></a>GetForwardSMS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dtu.o(i.GetForwardSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetForwardSMS &rArr; ForwardSMS_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSMS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInit
</UL>

<P><STRONG><a name="[11d]"></a>GetForwardSer485</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dtu.o(i.GetForwardSer485))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetForwardSer485 &rArr; ForwardSer485_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSer485_new
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsEventHandleState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsDealSMSState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsEventHandleState
</UL>

<P><STRONG><a name="[11e]"></a>GetModbusBusiness</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dtu.o(i.GetModbusBusiness))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetModbusBusiness &rArr; ModbusBusiness_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusBusiness_new
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsEventHandleState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInit
</UL>

<P><STRONG><a name="[120]"></a>Get_str_data</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, system.o(i.Get_str_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_get_info
</UL>

<P><STRONG><a name="[40]"></a>GprsCnntManagerRun</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, dtu.o(i.GprsCnntManagerRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GprsCnntManagerRun &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.GprsCnntManagerState_ctor)
</UL>
<P><STRONG><a name="[124]"></a>GprsCnntManagerState_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.GprsCnntManagerState_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GprsCnntManagerState_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkState_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerState_new
</UL>

<P><STRONG><a name="[126]"></a>GprsCnntManagerState_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.GprsCnntManagerState_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GprsCnntManagerState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerState_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuilderGprsCnntManagerState
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuilderGprsCnntManagerState
</UL>

<P><STRONG><a name="[41]"></a>GprsConnectRun</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, dtu.o(i.GprsConnectRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GprsConnectRun &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsTcpCnnectFinish
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsTcpCnnectBeagin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_level
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alarmclock_s
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.GprsConnectState_ctor)
</UL>
<P><STRONG><a name="[12a]"></a>GprsConnectState_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.GprsConnectState_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GprsConnectState_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkState_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectState_new
</UL>

<P><STRONG><a name="[12b]"></a>GprsConnectState_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.GprsConnectState_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GprsConnectState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectState_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsConnectState
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsConnectState
</UL>

<P><STRONG><a name="[43]"></a>GprsDealSMSRun</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, dtu.o(i.GprsDealSMSRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GprsDealSMSRun &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_phoneNO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_level
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.GprsDealSMSState_ctor)
</UL>
<P><STRONG><a name="[12e]"></a>GprsDealSMSState_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.GprsDealSMSState_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GprsDealSMSState_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkState_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSState_new
</UL>

<P><STRONG><a name="[12f]"></a>GprsDealSMSState_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.GprsDealSMSState_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GprsDealSMSState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSState_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsDealSMSState
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsDealSMSState
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsDealSMSState
</UL>

<P><STRONG><a name="[45]"></a>GprsEventHandleRun</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, dtu.o(i.GprsEventHandleRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GprsEventHandleRun &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_phoneNO
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_level
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alarmclock_s
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.GprsEventHandleState_ctor)
</UL>
<P><STRONG><a name="[131]"></a>GprsEventHandleState_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.GprsEventHandleState_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GprsEventHandleState_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkState_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleState_new
</UL>

<P><STRONG><a name="[132]"></a>GprsEventHandleState_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.GprsEventHandleState_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GprsEventHandleState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleState_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsEventHandleState
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsEventHandleState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsEventHandleState
</UL>

<P><STRONG><a name="[10e]"></a>GprsGetInstance</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gprs.o(i.GprsGetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_t_new
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBufData
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThrdDtu
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsShutdown
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpModbusAckCB
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestRun
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatRun
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSRun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerRun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSMSProcess
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardNetProcess
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSConfigSystem_ack
</UL>

<P><STRONG><a name="[46]"></a>GprsHeatBeatRun</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, dtu.o(i.GprsHeatBeatRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GprsHeatBeatRun &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringing
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alarmclock_s
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.GprsHeatBeatState_ctor)
</UL>
<P><STRONG><a name="[135]"></a>GprsHeatBeatState_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.GprsHeatBeatState_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GprsHeatBeatState_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkState_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatState_new
</UL>

<P><STRONG><a name="[136]"></a>GprsHeatBeatState_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.GprsHeatBeatState_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GprsHeatBeatState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatState_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuilderGprsHeatBeatState
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuilderGprsHeatBeatState
</UL>

<P><STRONG><a name="[8f]"></a>GprsRun</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gprs.o(i.GprsRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GprsRun &rArr; SendBufData &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBufData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[47]"></a>GprsSelfTestRun</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dtu.o(i.GprsSelfTestRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GprsSelfTestRun &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_level
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.GprsSelfTestState_ctor)
</UL>
<P><STRONG><a name="[138]"></a>GprsSelfTestState_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.GprsSelfTestState_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GprsSelfTestState_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkState_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestState_new
</UL>

<P><STRONG><a name="[139]"></a>GprsSelfTestState_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.GprsSelfTestState_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GprsSelfTestState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestState_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuildGprsSelfTestState
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUBuildGprsSelfTestState
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuildGprsSelfTestState
</UL>

<P><STRONG><a name="[128]"></a>GprsTcpCnnectBeagin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gprs.o(i.GprsTcpCnnectBeagin))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
</UL>

<P><STRONG><a name="[129]"></a>GprsTcpCnnectFinish</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gprs.o(i.GprsTcpCnnectFinish))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
</UL>

<P><STRONG><a name="[83]"></a>Gprs_Event_smsRecv</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gprs.o(i.Gprs_Event_smsRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Gprs_Event_smsRecv &rArr; clear_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[82]"></a>Gprs_Event_tcpRecv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gprs.o(i.Gprs_Event_tcpRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gprs_Event_tcpRecv &rArr; VecBuf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[81]"></a>Gprs_Event_tcpclose</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gprs.o(i.Gprs_Event_tcpclose))
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[78]"></a>Gprs_check_simCard</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, gprs.o(i.Gprs_check_simCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gprs_check_simCard &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[72]"></a>Gprs_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gprs.o(i.Gprs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Gprs_init &rArr; gprs_uart_init &rArr; DMA_GprsUart_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regRxIrq_cb
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_ioctl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[150]"></a>Grps_SetCipmode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gprs.o(i.Grps_SetCipmode))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThrdDtu
</UL>

<P><STRONG><a name="[151]"></a>Grps_SetCipmux</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gprs.o(i.Grps_SetCipmux))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThrdDtu
</UL>

<P><STRONG><a name="[143]"></a>IWDG_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chipset.o(i.IWDG_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[147]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_iwwg
</UL>

<P><STRONG><a name="[145]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[146]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[144]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[149]"></a>Init_TIM2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, chipset.o(i.Init_TIM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_TIM2 &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>Init_ThrdDtu</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, cdma_dtu.o(i.Init_ThrdDtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init_ThrdDtu &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grps_SetCipmux
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grps_SetCipmode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCFctGetInstance
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prnt_485
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>Init_Thread_rtu</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, thread_rtu.o(i.Init_Thread_rtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Init_Thread_rtu &rArr; s485_uart_init &rArr; DMA_s485Uart_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_ioctl
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInstance_new
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>Init_rtu</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, rtu.o(i.Init_rtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Init_rtu &rArr; regType3_write &rArr; Big_end_to_Little_end
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType3_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_rangL
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_rangH
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_alarmL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_alarmH
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regist_reg3_wrcb
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regist_get_val
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regist_get_rsv
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regist_get_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>Init_system_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dtuconfig.o(i.Init_system_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Init_system_config &rArr; get_dtuCfg &rArr; fs_creator &rArr; page_free &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>Led_level</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, system.o(i.Led_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Led_level
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestRun
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSRun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
</UL>

<P><STRONG><a name="[4e]"></a>ModbusBusinessProcess</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dtu.o(i.ModbusBusinessProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ModbusBusinessProcess &rArr; modbusRTU_data &rArr; regType3_write &rArr; Big_end_to_Little_end
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU_getID
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.ModbusBusiness_ctor)
</UL>
<P><STRONG><a name="[164]"></a>ModbusBusiness_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.ModbusBusiness_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusBusiness_new
</UL>

<P><STRONG><a name="[11f]"></a>ModbusBusiness_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.ModbusBusiness_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ModbusBusiness_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusBusiness_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusBusiness
</UL>

<P><STRONG><a name="[169]"></a>NVIC_Configuration</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, chipset.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[16b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[16a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[55]"></a>PThrInitState</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dtu.o(i.PThrInitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PThrInitState &rArr; PassThroughModeBuilder_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuilder_new
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.PassThroughModeContext_ctor)
</UL>
<P><STRONG><a name="[50]"></a>PassThroughModeBuildGprsConnectState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.PassThroughModeBuildGprsConnectState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PassThroughModeBuildGprsConnectState &rArr; GprsConnectState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.PassThroughModeBuilder_ctor)
</UL>
<P><STRONG><a name="[52]"></a>PassThroughModeBuildGprsDealSMSState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dtu.o(i.PassThroughModeBuildGprsDealSMSState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PassThroughModeBuildGprsDealSMSState &rArr; GetConfigSystem &rArr; ConfigSystem_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSState_new
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigSystem
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.PassThroughModeBuilder_ctor)
</UL>
<P><STRONG><a name="[51]"></a>PassThroughModeBuildGprsEventHandleState</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dtu.o(i.PassThroughModeBuildGprsEventHandleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PassThroughModeBuildGprsEventHandleState &rArr; GetForwardSer485 &rArr; ForwardSer485_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleState_new
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardSer485
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigSystem
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardNet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.PassThroughModeBuilder_ctor)
</UL>
<P><STRONG><a name="[4f]"></a>PassThroughModeBuildGprsSelfTestState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.PassThroughModeBuildGprsSelfTestState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PassThroughModeBuildGprsSelfTestState &rArr; GprsSelfTestState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.PassThroughModeBuilder_ctor)
</UL>
<P><STRONG><a name="[54]"></a>PassThroughModeBuilderGprsCnntManagerState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.PassThroughModeBuilderGprsCnntManagerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PassThroughModeBuilderGprsCnntManagerState &rArr; GprsCnntManagerState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.PassThroughModeBuilder_ctor)
</UL>
<P><STRONG><a name="[53]"></a>PassThroughModeBuilderGprsHeatBeatState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.PassThroughModeBuilderGprsHeatBeatState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PassThroughModeBuilderGprsHeatBeatState &rArr; GprsHeatBeatState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.PassThroughModeBuilder_ctor)
</UL>
<P><STRONG><a name="[16e]"></a>PassThroughModeBuilder_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dtu.o(i.PassThroughModeBuilder_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuilder_new
</UL>

<P><STRONG><a name="[16d]"></a>PassThroughModeBuilder_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.PassThroughModeBuilder_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PassThroughModeBuilder_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuilder_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PThrInitState
</UL>

<P><STRONG><a name="[16f]"></a>PassThroughModeContext_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.PassThroughModeContext_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PassThroughModeContext_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateContext_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeContext_new
</UL>

<P><STRONG><a name="[108]"></a>PassThroughModeContext_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.PassThroughModeContext_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PassThroughModeContext_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeContext_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtucreateContext
</UL>

<P><STRONG><a name="[174]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[101]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
</UL>

<P><STRONG><a name="[172]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[18c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[173]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[18b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[171]"></a>RCC_Configuration</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, chipset.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[57]"></a>RRTUBuildGprsConnectState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.RRTUBuildGprsConnectState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RRTUBuildGprsConnectState &rArr; GprsConnectState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.RemoteRTUModeBuilder_ctor)
</UL>
<P><STRONG><a name="[59]"></a>RRTUBuildGprsDealSMSState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dtu.o(i.RRTUBuildGprsDealSMSState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RRTUBuildGprsDealSMSState &rArr; GetConfigSystem &rArr; ConfigSystem_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSState_new
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigSystem
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.RemoteRTUModeBuilder_ctor)
</UL>
<P><STRONG><a name="[58]"></a>RRTUBuildGprsEventHandleState</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dtu.o(i.RRTUBuildGprsEventHandleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RRTUBuildGprsEventHandleState &rArr; GetConfigSystem &rArr; ConfigSystem_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleState_new
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigSystem
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusBusiness
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.RemoteRTUModeBuilder_ctor)
</UL>
<P><STRONG><a name="[56]"></a>RRTUBuildGprsSelfTestState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.RRTUBuildGprsSelfTestState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RRTUBuildGprsSelfTestState &rArr; GprsSelfTestState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.RemoteRTUModeBuilder_ctor)
</UL>
<P><STRONG><a name="[5b]"></a>RRTUBuilderGprsCnntManagerState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.RRTUBuilderGprsCnntManagerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RRTUBuilderGprsCnntManagerState &rArr; GprsCnntManagerState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.RemoteRTUModeBuilder_ctor)
</UL>
<P><STRONG><a name="[5a]"></a>RRTUBuilderGprsHeatBeatState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.RRTUBuilderGprsHeatBeatState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RRTUBuilderGprsHeatBeatState &rArr; GprsHeatBeatState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.RemoteRTUModeBuilder_ctor)
</UL>
<P><STRONG><a name="[5c]"></a>RRTUInitState</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dtu.o(i.RRTUInitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RRTUInitState &rArr; RemoteRTUModeBuilder_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeBuilder_new
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.RemoteRTUModeContext_ctor)
</UL>
<P><STRONG><a name="[15f]"></a>Regist_get_alarm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.Regist_get_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[15e]"></a>Regist_get_rsv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.Regist_get_rsv))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[15d]"></a>Regist_get_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.Regist_get_val))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[15c]"></a>Regist_reg3_wrcb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modbusrtu_cli.o(i.Regist_reg3_wrcb))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[177]"></a>RemoteRTUModeBuilder_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dtu.o(i.RemoteRTUModeBuilder_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeBuilder_new
</UL>

<P><STRONG><a name="[175]"></a>RemoteRTUModeBuilder_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.RemoteRTUModeBuilder_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RemoteRTUModeBuilder_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeBuilder_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUInitState
</UL>

<P><STRONG><a name="[178]"></a>RemoteRTUModeContext_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.RemoteRTUModeContext_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RemoteRTUModeContext_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateContext_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeContext_new
</UL>

<P><STRONG><a name="[10a]"></a>RemoteRTUModeContext_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.RemoteRTUModeContext_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RemoteRTUModeContext_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeContext_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtucreateContext
</UL>

<P><STRONG><a name="[134]"></a>Ringing</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, times.o(i.Ringing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ringing
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBufData
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatRun
</UL>

<P><STRONG><a name="[5d]"></a>RtuInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rtu.o(i.RtuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RtuInit &rArr; GetModbusBusiness &rArr; ModbusBusiness_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusBusiness
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardSMS
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardNet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtu.o(i.RtuInstance_ctor)
</UL>
<P><STRONG><a name="[179]"></a>RtuInstance_ctor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtu.o(i.RtuInstance_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInstance_new
</UL>

<P><STRONG><a name="[153]"></a>RtuInstance_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtu.o(i.RtuInstance_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RtuInstance_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInstance_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_rtu
</UL>

<P><STRONG><a name="[5e]"></a>RtuRun</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtu.o(i.RtuRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RtuRun &rArr; s485Obtain_Playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadActive
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485Obtain_Playloadbuf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485GiveBack_Rxbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtu.o(i.RtuInstance_ctor)
</UL>
<P><STRONG><a name="[66]"></a>SMSInitState</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dtu.o(i.SMSInitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SMSInitState &rArr; SMSModeBuilder_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuilder_new
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.SMSModeContext_ctor)
</UL>
<P><STRONG><a name="[61]"></a>SMSModeBuildGprsConnectState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.SMSModeBuildGprsConnectState))
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.SMSModeBuilder_ctor)
</UL>
<P><STRONG><a name="[63]"></a>SMSModeBuildGprsDealSMSState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dtu.o(i.SMSModeBuildGprsDealSMSState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SMSModeBuildGprsDealSMSState &rArr; GetForwardSer485 &rArr; ForwardSer485_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSState_new
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardSer485
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigSystem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.SMSModeBuilder_ctor)
</UL>
<P><STRONG><a name="[62]"></a>SMSModeBuildGprsEventHandleState</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dtu.o(i.SMSModeBuildGprsEventHandleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SMSModeBuildGprsEventHandleState &rArr; GetForwardSer485 &rArr; ForwardSer485_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleState_new
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForwardSer485
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigSystem
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.SMSModeBuilder_ctor)
</UL>
<P><STRONG><a name="[60]"></a>SMSModeBuildGprsSelfTestState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dtu.o(i.SMSModeBuildGprsSelfTestState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SMSModeBuildGprsSelfTestState &rArr; GprsSelfTestState_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestState_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.SMSModeBuilder_ctor)
</UL>
<P><STRONG><a name="[65]"></a>SMSModeBuilderGprsCnntManagerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.SMSModeBuilderGprsCnntManagerState))
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.SMSModeBuilder_ctor)
</UL>
<P><STRONG><a name="[64]"></a>SMSModeBuilderGprsHeatBeatState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtu.o(i.SMSModeBuilderGprsHeatBeatState))
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.SMSModeBuilder_ctor)
</UL>
<P><STRONG><a name="[17f]"></a>SMSModeBuilder_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dtu.o(i.SMSModeBuilder_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuilder_new
</UL>

<P><STRONG><a name="[17e]"></a>SMSModeBuilder_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.SMSModeBuilder_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SMSModeBuilder_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuilder_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSInitState
</UL>

<P><STRONG><a name="[180]"></a>SMSModeContext_ctor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtu.o(i.SMSModeContext_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SMSModeContext_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateContext_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeContext_new
</UL>

<P><STRONG><a name="[109]"></a>SMSModeContext_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtu.o(i.SMSModeContext_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SMSModeContext_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeContext_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtucreateContext
</UL>

<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[223]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[181]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendByteForRead
</UL>

<P><STRONG><a name="[222]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_I2S_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_I2S_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[182]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendByteForRead
</UL>

<P><STRONG><a name="[226]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendByteForRead
</UL>

<P><STRONG><a name="[221]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[23e]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init_spi
</UL>

<P><STRONG><a name="[5f]"></a>Ser485ModbusAckCB</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dtu.o(i.Ser485ModbusAckCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ser485ModbusAckCB &rArr; s485_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtu.o(i.RtuRun)
</UL>
<P><STRONG><a name="[15a]"></a>Set_alarmH</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.Set_alarmH))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[15b]"></a>Set_alarmL</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.Set_alarmL))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[158]"></a>Set_rangH</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.Set_rangH))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[159]"></a>Set_rangL</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.Set_rangL))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
</UL>

<P><STRONG><a name="[67]"></a>StateContextInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dtu.o(i.StateContextInit))
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.StateContext_ctor)
</UL>
<P><STRONG><a name="[170]"></a>StateContext_ctor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dtu.o(i.StateContext_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeContext_ctor
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeContext_ctor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeContext_ctor
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[1ef]"></a>SystemShutdown</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.SystemShutdown))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event
</UL>

<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, times.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_iwwg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM2
</UL>

<P><STRONG><a name="[18a]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM2
</UL>

<P><STRONG><a name="[14a]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM2
</UL>

<P><STRONG><a name="[188]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM2
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinishCollect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealwithCollect
</UL>

<P><STRONG><a name="[14b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM2
</UL>

<P><STRONG><a name="[44]"></a>TcpModbusAckCB</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dtu.o(i.TcpModbusAckCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TcpModbusAckCB &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.GprsEventHandleRun)
</UL>
<P><STRONG><a name="[aa]"></a>Thread_rtu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, thread_rtu.o(i.Thread_rtu))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_rtu.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, serial485_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_loadbuflen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, gprs_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_loadbuflen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[190]"></a>USART_Configuration</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, chipset.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
</UL>

<P><STRONG><a name="[193]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
</UL>

<P><STRONG><a name="[1ba]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[18e]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[18f]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[141]"></a>VecBuf_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bufmanager.o(i.VecBuf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VecBuf_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_init
</UL>

<P><STRONG><a name="[13c]"></a>VecBuf_read</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, bufmanager.o(i.VecBuf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VecBuf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_test
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Event_tcpRecv
</UL>

<P><STRONG><a name="[195]"></a>VecBuf_write</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, bufmanager.o(i.VecBuf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VecBuf_write &rArr; VecBuf_RecycleAFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_RecycleAFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_test
</UL>

<P><STRONG><a name="[6d]"></a>WorkStatePrint</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dtu.o(i.WorkStatePrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WorkStatePrint &rArr; Debug_485 &rArr; s485_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_485
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.WorkState_ctor)
</UL>
<P><STRONG><a name="[6c]"></a>WorkStateTestInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dtu.o(i.WorkStateTestInit))
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.WorkState_ctor)
</UL>
<P><STRONG><a name="[125]"></a>WorkState_ctor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dtu.o(i.WorkState_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestState_ctor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatState_ctor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleState_ctor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSState_ctor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectState_ctor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerState_ctor
</UL>

<P><STRONG><a name="[197]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[256]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[1b4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_mount
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sarch_finleinfo_and_return_curpage
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdFilearea_byfileinfo
</UL>

<P><STRONG><a name="[199]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[257]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[123]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_smscAddr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns_ip
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_smscAddr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seq_TextSMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_sms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_ip
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestRun
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerRun
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[258]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[259]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[25a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[25b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[212]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[7d]"></a>buf_test</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, gprs.o(i.buf_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = buf_test &rArr; VecBuf_write &rArr; VecBuf_RecycleAFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[13a]"></a>check_bit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, system.o(i.check_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Event_smsRecv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_area
</UL>

<P><STRONG><a name="[1a7]"></a>check_ip</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gprs.o(i.check_ip))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns_ip
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[1a8]"></a>check_phoneNO</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, gprs.o(i.check_phoneNO))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_smscAddr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_smscAddr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seq_TextSMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[1e7]"></a>clean_time2_flags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, times.o(i.clean_time2_flags))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>clear_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, system.o(i.clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Event_smsRecv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_malloc
</UL>

<P><STRONG><a name="[12d]"></a>compare_phoneNO</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gprs.o(i.compare_phoneNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compare_phoneNO
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSRun
</UL>

<P><STRONG><a name="[1a9]"></a>copy_phoneNO</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, gprs.o(i.copy_phoneNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copy_phoneNO
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[19d]"></a>create_adc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(i.create_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = create_adc &rArr; init_stm32adc &rArr; DMA1_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_para_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[211]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[218]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[20f]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[ee]"></a>decodeTTCP_begin</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ttextconfprot.o(i.decodeTTCP_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = decodeTTCP_begin &rArr; strcspn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eliminate_the_space
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_server
</UL>

<P><STRONG><a name="[f0]"></a>decodeTTCP_finish</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ttextconfprot.o(i.decodeTTCP_finish))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_server
</UL>

<P><STRONG><a name="[7c]"></a>delete_sms</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gprs.o(i.delete_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = delete_sms &rArr; serial_cmmn &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[ea]"></a>enter_TTCP</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ttextconfprot.o(i.enter_TTCP))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
</UL>

<P><STRONG><a name="[189]"></a>feed_iwwg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_conf_cm.o(i.feed_iwwg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = feed_iwwg
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[1ae]"></a>filesys_init</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, sw_filesys.o(i.filesys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = filesys_init &rArr; w25q_init &rArr; w25q_read_id &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_info
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>filesys_mount</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sw_filesys.o(i.filesys_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = filesys_mount &rArr; fs_format &rArr; fs_flush &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_format
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[71]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_rtu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToSmsMode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSInitState
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRTUInitState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PThrInitState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sw_filesys.o(i.filesys_init)
</UL>
<P><STRONG><a name="[1bb]"></a>free_playloadbuf</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ping_pongbuf.o(i.free_playloadbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485GiveBack_Rxbuf
</UL>

<P><STRONG><a name="[1bc]"></a>fs_creator</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, sw_filesys.o(i.fs_creator))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fs_creator &rArr; page_free &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_ins_next
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchfile
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_malloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_free
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
</UL>

<P><STRONG><a name="[168]"></a>fs_flush</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sw_filesys.o(i.fs_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fs_flush &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTURegTpye3_wrCB
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_format
</UL>

<P><STRONG><a name="[1b5]"></a>fs_format</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sw_filesys.o(i.fs_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fs_format &rArr; fs_flush &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_erase
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_mount
</UL>

<P><STRONG><a name="[166]"></a>fs_lseek</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, sw_filesys.o(i.fs_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTURegTpye3_wrCB
</UL>

<P><STRONG><a name="[1c3]"></a>fs_open</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sw_filesys.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fs_open &rArr; rdFilearea_byfileinfo &rArr; read_page &rArr; w25q_Read_page_Data &rArr; w25q_rd_data &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_ins_next
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_elmt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sarch_finleinfo_and_return_curpage
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdFilearea_byfileinfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
</UL>

<P><STRONG><a name="[1c7]"></a>fs_read</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, sw_filesys.o(i.fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fs_read &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locate_page
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
</UL>

<P><STRONG><a name="[167]"></a>fs_write</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, sw_filesys.o(i.fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locate_page
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTURegTpye3_wrCB
</UL>

<P><STRONG><a name="[eb]"></a>get_TTCPVer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ttextconfprot.o(i.get_TTCPVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_TTCPVer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
</UL>

<P><STRONG><a name="[7f]"></a>get_apn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gprs.o(i.get_apn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_apn
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_apn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[1a3]"></a>get_cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ttextconfprot.o(i.get_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[1a2]"></a>get_cmdtype</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ttextconfprot.o(i.get_cmdtype))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[85]"></a>get_firstCnt_seq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gprs.o(i.get_firstCnt_seq))
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[84]"></a>get_firstDiscnt_seq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gprs.o(i.get_firstDiscnt_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_firstDiscnt_seq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[1a4]"></a>get_firstarg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ttextconfprot.o(i.get_firstarg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_firstarg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eliminate_the_space
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[f9]"></a>get_loadbuflen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_loadbuflen))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>get_playloadbuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_playloadbuf))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_read
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485Obtain_Playloadbuf
</UL>

<P><STRONG><a name="[13f]"></a>gprs_Uart_ioctl</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gprs_uart.o(i.gprs_Uart_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gprs_Uart_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_event
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_init
</UL>

<P><STRONG><a name="[184]"></a>gprs_Uart_read</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gprs_uart.o(i.gprs_Uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_event
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
</UL>

<P><STRONG><a name="[185]"></a>gprs_Uart_write</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gprs_uart.o(i.gprs_Uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gprs_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp_buf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
</UL>

<P><STRONG><a name="[1cf]"></a>gprs_t_ctor</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, gprs.o(i.gprs_t_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_t_new
</UL>

<P><STRONG><a name="[133]"></a>gprs_t_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gprs.o(i.gprs_t_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_t_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
</UL>

<P><STRONG><a name="[13e]"></a>gprs_uart_init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, gprs_uart.o(i.gprs_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gprs_uart_init &rArr; DMA_GprsUart_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pingponfbuf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_init
</UL>

<P><STRONG><a name="[1d1]"></a>init_pingponfbuf</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ping_pongbuf.o(i.init_pingponfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_pingponfbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
</UL>

<P><STRONG><a name="[1db]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[1dd]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[1e0]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1dc]"></a>isr_mbx_receive</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[1df]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[1e2]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[1c4]"></a>list_get_elmt</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, list.o(i.list_get_elmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_get_elmt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[1b1]"></a>list_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(i.list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_init
</UL>

<P><STRONG><a name="[1c0]"></a>list_ins_next</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, list.o(i.list_ins_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = list_ins_next &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
</UL>

<P><STRONG><a name="[73]"></a>lock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gprs.o(i.lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[0]"></a>main</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; Config_job &rArr; dtu_conf &rArr; fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32LED_new
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regist_timejob
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_reboot
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_mount
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_adc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_time2_flags
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_level
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_system_config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_rtu
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_job
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadActive
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThrdDtu
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_t_new
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuInstance_new
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32LED_new
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regist_timejob
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeContext_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSModeBuilder_new
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeContext_new
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteRTUModeBuilder_new
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeContext_new
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThroughModeBuilder_new
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusBusiness_new
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSelfTestState_new
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatState_new
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleState_new
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDealSMSState_new
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectState_new
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCnntManagerState_new
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSer485_new
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSMS_new
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardNet_new
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyProcess_new
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtuContextFactory_new
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystem_new
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_ins_next
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdFilearea_byfileinfo
</UL>

<P><STRONG><a name="[163]"></a>modbusRTU_data</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, modbusrtu_cli.o(i.modbusRTU_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = modbusRTU_data &rArr; regType3_write &rArr; Big_end_to_Little_end
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType3_write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType3_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType4_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusBusinessProcess
</UL>

<P><STRONG><a name="[162]"></a>modbusRTU_getID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbusrtu_cli.o(i.modbusRTU_getID))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusBusinessProcess
</UL>

<P><STRONG><a name="[68]"></a>nextState</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dtu.o(i.nextState))
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.StateContext_ctor)
</UL>
<P><STRONG><a name="[e8]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_test
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp_buf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seq_TextSMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_sms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_check_simCard
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sms2TextMode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_ip
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_get_info
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSer485Process
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTURegTpye3_wrCB
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
</UL>

<P><STRONG><a name="[af]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[b1]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[1eb]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[140]"></a>osMutexCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_init
</UL>

<P><STRONG><a name="[235]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
</UL>

<P><STRONG><a name="[1e5]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
</UL>

<P><STRONG><a name="[1d0]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
</UL>

<P><STRONG><a name="[fc]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1cd]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485Obtain_Playloadbuf
</UL>

<P><STRONG><a name="[b0]"></a>osThreadCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_rtu
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThrdDtu
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[a8]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[17d]"></a>osThreadYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_rtu
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrd_dtu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuRun
</UL>

<P><STRONG><a name="[1ec]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[ab]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>os_error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[a1]"></a>os_idle_demon</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_idle_demon &rArr; feed_iwwg
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_iwwg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[1ad]"></a>os_reboot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_reboot))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[215]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[b6]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[48]"></a>read_event</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, gprs.o(i.read_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_event &rArr; get_seq &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seq
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemShutdown
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.Gprs_init)
</UL>
<P><STRONG><a name="[7a]"></a>read_phnNmbr_TextSMS</STRONG> (Thumb, 526 bytes, Stack size 80 bytes, gprs.o(i.read_phnNmbr_TextSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = read_phnNmbr_TextSMS &rArr; set_sms2TextMode &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phoneNO
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sms2TextMode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_phNO
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[7b]"></a>read_seq_TextSMS</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, gprs.o(i.read_seq_TextSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read_seq_TextSMS &rArr; set_sms2TextMode &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phoneNO
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sms2TextMode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_phNO
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[86]"></a>read_smscAddr</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, gprs.o(i.read_smscAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_smscAddr &rArr; serial_cmmn &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phoneNO
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[8d]"></a>recvform_tcp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gprs.o(i.recvform_tcp))
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[142]"></a>regRxIrq_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gprs_uart.o(i.regRxIrq_cb))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_init
</UL>

<P><STRONG><a name="[165]"></a>regType3_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, modbusrtu_cli.o(i.regType3_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = regType3_read &rArr; Little_end_to_Big_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Little_end_to_Big_end
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTURegTpye3_wrCB
</UL>

<P><STRONG><a name="[157]"></a>regType3_write</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, modbusrtu_cli.o(i.regType3_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = regType3_write &rArr; Big_end_to_Little_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_end_to_Little_end
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_rtu
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU_data
</UL>

<P><STRONG><a name="[1ea]"></a>regType4_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, modbusrtu_cli.o(i.regType4_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = regType4_read &rArr; Little_end_to_Big_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Little_end_to_Big_end
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU_data
</UL>

<P><STRONG><a name="[176]"></a>regType4_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbusrtu_cli.o(i.regType4_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = regType4_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_rtuval
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_rtursv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_rtualarm
</UL>

<P><STRONG><a name="[1e8]"></a>regist_timejob</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, times.o(i.regist_timejob))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = regist_timejob &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>report_event</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gprs.o(i.report_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = report_event &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[36]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[230]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1f5]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[1f9]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1fb]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1fc]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[1fe]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[1ff]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[37]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[231]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1f7]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[21c]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[22b]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[213]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[203]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[1de]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[22d]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[204]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[207]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[22e]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[208]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>

<P><STRONG><a name="[209]"></a>rt_mut_wait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>

<P><STRONG><a name="[b3]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1e4]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[1e3]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[1f6]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1fa]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[1fd]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[20a]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[205]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[201]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[200]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[20c]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[22f]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[20b]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[20d]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[20e]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[b2]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[1f8]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[210]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[214]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[b4]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[217]"></a>rt_tsk_create</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[219]"></a>rt_tsk_delete</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[21b]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[21d]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[232]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[17c]"></a>s485GiveBack_Rxbuf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial485_uart.o(i.s485GiveBack_Rxbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s485GiveBack_Rxbuf &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuRun
</UL>

<P><STRONG><a name="[17a]"></a>s485Obtain_Playloadbuf</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, serial485_uart.o(i.s485Obtain_Playloadbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s485Obtain_Playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuRun
</UL>

<P><STRONG><a name="[155]"></a>s485_Uart_ioctl</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, serial485_uart.o(i.s485_Uart_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s485_Uart_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_rtu
</UL>

<P><STRONG><a name="[e9]"></a>s485_Uart_read</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, serial485_uart.o(i.s485_Uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = s485_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
</UL>

<P><STRONG><a name="[ed]"></a>s485_Uart_write</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, serial485_uart.o(i.s485_Uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s485_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_apptype
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prnt_485
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardSer485Process
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_485
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_str
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ser485ModbusAckCB
</UL>

<P><STRONG><a name="[154]"></a>s485_uart_init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, serial485_uart.o(i.s485_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = s485_uart_init &rArr; DMA_s485Uart_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pingponfbuf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_rtu
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>send_text_sms</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, gprs.o(i.send_text_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = send_text_sms &rArr; set_sms2TextMode &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phoneNO
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sms2TextMode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[8b]"></a>sendto_tcp</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, gprs.o(i.sendto_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sendto_tcp &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[8c]"></a>sendto_tcp_buf</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gprs.o(i.sendto_tcp_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sendto_tcp_buf &rArr; gprs_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alarmclock_ms
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[69]"></a>setCurState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dtu.o(i.setCurState))
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.StateContext_ctor)
</UL>
<P><STRONG><a name="[21e]"></a>set_alarmclock_ms</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, times.o(i.set_alarmclock_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_alarmclock_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_tcp_buf
</UL>

<P><STRONG><a name="[10f]"></a>set_alarmclock_s</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, times.o(i.set_alarmclock_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_alarmclock_s
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsHeatBeatRun
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsEventHandleRun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectRun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardNetProcess
</UL>

<P><STRONG><a name="[1ed]"></a>set_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, system.o(i.set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_free
</UL>

<P><STRONG><a name="[1ac]"></a>set_default</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, dtuconfig.o(i.set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_default &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dtuCfg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[88]"></a>set_dns_ip</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gprs.o(i.set_dns_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_dns_ip &rArr; serial_cmmn &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[87]"></a>set_smscAddr</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, gprs.o(i.set_smscAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_smscAddr &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phoneNO
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[76]"></a>shutdown</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gprs.o(i.shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shutdown &rArr; serial_cmmn &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[7e]"></a>sms_test</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, gprs.o(i.sms_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sms_test &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[220]"></a>spi_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init_spi
</UL>

<P><STRONG><a name="[23f]"></a>spi_ioctl</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, spi.o(i.spi_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init_spi
</UL>

<P><STRONG><a name="[224]"></a>spi_read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi.o(i.spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_read &rArr; spi_sendByteForRead
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendByteForRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
</UL>

<P><STRONG><a name="[227]"></a>spi_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, spi.o(i.spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
</UL>

<P><STRONG><a name="[75]"></a>startup</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gprs.o(i.startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = startup
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[229]"></a>stm32LED_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(i.stm32LED_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32LED_new
</UL>

<P><STRONG><a name="[1e6]"></a>stm32LED_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.stm32LED_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stm32LED_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32LED_ctor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[93]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[94]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[22c]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[95]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[96]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[97]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[98]"></a>svcMutexWait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[99]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[9a]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[9b]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[9c]"></a>svcThreadCreate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[9d]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[9e]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[9f]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[a0]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[6b]"></a>switchToSmsMode</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dtu.o(i.switchToSmsMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switchToSmsMode &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtu.o(i.StateContext_ctor)
</UL>
<P><STRONG><a name="[fb]"></a>switch_receivebuf</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, ping_pongbuf.o(i.switch_receivebuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = switch_receivebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_s485Uart_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GprsUart_Init
</UL>

<P><STRONG><a name="[216]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[89]"></a>tcpClose</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gprs.o(i.tcpClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpClose &rArr; serial_cmmn &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[8e]"></a>tcp_test</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, gprs.o(i.tcp_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcp_test &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[8a]"></a>tcpip_cnnt</STRONG> (Thumb, 558 bytes, Stack size 64 bytes, gprs.o(i.tcpip_cnnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcpip_cnnt &rArr; prepare_ip &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmmn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_ip
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemShutdown
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[a9]"></a>thrd_dtu</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cdma_dtu.o(i.thrd_dtu))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadActive
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdma_dtu.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>threadActive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.threadActive))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrd_dtu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtuRun
</UL>

<P><STRONG><a name="[74]"></a>unlock</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gprs.o(i.unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[1b7]"></a>w25q_Erase_Sector</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = w25q_Erase_Sector &rArr; w25q_write_waitbusy &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_flash
</UL>

<P><STRONG><a name="[1f2]"></a>w25q_Read_Sector_Data</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_Read_Sector_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = w25q_Read_Sector_Data &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>

<P><STRONG><a name="[1f0]"></a>w25q_Read_page_Data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_Read_page_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = w25q_Read_page_Data &rArr; w25q_rd_data &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page
</UL>

<P><STRONG><a name="[239]"></a>w25q_Write</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, hw_w25q.o(i.w25q_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write_Sector_Data
</UL>

<P><STRONG><a name="[1b8]"></a>w25q_Write_Sector_Data</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hw_w25q.o(i.w25q_Write_Sector_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_flash
</UL>

<P><STRONG><a name="[1c2]"></a>w25q_erase</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hw_w25q.o(i.w25q_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = w25q_erase &rArr; w25q_write_waitbusy &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_format
</UL>

<P><STRONG><a name="[1b0]"></a>w25q_info</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hw_w25q.o(i.w25q_info))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_init
</UL>

<P><STRONG><a name="[1af]"></a>w25q_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = w25q_init &rArr; w25q_read_id &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init_spi
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_init
</UL>

<P><STRONG><a name="[23b]"></a>w25q_init_cs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chipset.o(i.w25q_init_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = w25q_init_cs &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
</UL>

<P><STRONG><a name="[23c]"></a>w25q_init_spi</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, chipset.o(i.w25q_init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = w25q_init_spi &rArr; spi_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ioctl
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
</UL>

<P><STRONG><a name="[238]"></a>w25q_rd_data</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_rd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = w25q_rd_data &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_page_Data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49]"></a>GprsShutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cdma_dtu.o(i.GprsShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GprsShutdown &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdma_dtu.o(i.Init_ThrdDtu)
</UL>
<P><STRONG><a name="[14f]"></a>prnt_485</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cdma_dtu.o(i.prnt_485))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prnt_485 &rArr; s485_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ThrdDtu
</UL>

<P><STRONG><a name="[90]"></a>Led_job</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.Led_job))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_job
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[183]"></a>Select_apptype</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, main.o(i.Select_apptype))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Select_apptype &rArr; s485_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TTCPVer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_TTCP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Gprs_get_info</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, gprs.o(i.Gprs_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Gprs_get_info &rArr; Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(i.gprs_t_ctor)
</UL>
<P><STRONG><a name="[137]"></a>SendBufData</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gprs.o(i.SendBufData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SendBufData &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringing
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRun
</UL>

<P><STRONG><a name="[13d]"></a>SerilTxandRx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gprs.o(i.SerilTxandRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_smscAddr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seq_TextSMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_check_simCard
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sms2TextMode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_ip
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_get_info
</UL>

<P><STRONG><a name="[1c9]"></a>check_apn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gprs.o(i.check_apn))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_apn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_ip
</UL>

<P><STRONG><a name="[1cb]"></a>get_seq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gprs.o(i.get_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_seq &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event
</UL>

<P><STRONG><a name="[1cc]"></a>get_sms_phNO</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gprs.o(i.get_sms_phNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_sms_phNO &rArr; strcspn
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seq_TextSMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
</UL>

<P><STRONG><a name="[1ee]"></a>prepare_ip</STRONG> (Thumb, 698 bytes, Stack size 24 bytes, gprs.o(i.prepare_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prepare_ip &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_apn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
</UL>

<P><STRONG><a name="[1a1]"></a>serial_cmmn</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gprs.o(i.serial_cmmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_cmmn &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_Uart_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_cnnt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns_ip
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_smscAddr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_sms
</UL>

<P><STRONG><a name="[1f1]"></a>set_sms2TextMode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gprs.o(i.set_sms2TextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_sms2TextMode &rArr; SerilTxandRx &rArr; gprs_Uart_read &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerilTxandRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_text_sms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seq_TextSMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phnNmbr_TextSMS
</UL>

<P><STRONG><a name="[a6]"></a>Turnoff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.Turnoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Turnoff
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.stm32LED_ctor)
</UL>
<P><STRONG><a name="[a5]"></a>Turnon</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.Turnon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Turnon
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.stm32LED_ctor)
</UL>
<P><STRONG><a name="[a3]"></a>blink</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, led.o(i.blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blink
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.stm32LED_ctor)
</UL>
<P><STRONG><a name="[a2]"></a>init_led</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, led.o(i.init_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_led
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.stm32LED_ctor)
</UL>
<P><STRONG><a name="[a4]"></a>led_destory</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.led_destory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_destory
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.stm32LED_ctor)
</UL>
<P><STRONG><a name="[a7]"></a>test</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, led.o(i.test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.stm32LED_ctor)
</UL>
<P><STRONG><a name="[4a]"></a>ModbusRTURegTpye3_wrCB</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, rtu.o(i.ModbusRTURegTpye3_wrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ModbusRTURegTpye3_wrCB &rArr; fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType3_read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtu.o(i.Init_rtu)
</UL>
<P><STRONG><a name="[4d]"></a>Read_rtualarm</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtu.o(i.Read_rtualarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_rtualarm &rArr; regType4_write
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType4_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtu.o(i.Init_rtu)
</UL>
<P><STRONG><a name="[4c]"></a>Read_rtursv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtu.o(i.Read_rtursv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_rtursv &rArr; regType4_write
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType4_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtu.o(i.Init_rtu)
</UL>
<P><STRONG><a name="[4b]"></a>Read_rtuval</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, rtu.o(i.Read_rtuval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_rtuval &rArr; regType4_write
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType4_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtu.o(i.Init_rtu)
</UL>
<P><STRONG><a name="[19c]"></a>ack_str</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dtuconfig.o(i.ack_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ack_str &rArr; s485_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtu_conf
</UL>

<P><STRONG><a name="[ef]"></a>dtu_conf</STRONG> (Thumb, 2992 bytes, Stack size 64 bytes, dtuconfig.o(i.dtu_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dtu_conf &rArr; fs_write &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_apn
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_phoneNO
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phoneNO
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_reboot
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firstarg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmdtype
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_str
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_lseek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_job
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_server
</UL>

<P><STRONG><a name="[161]"></a>get_dtuCfg</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dtuconfig.o(i.get_dtuCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = get_dtuCfg &rArr; fs_creator &rArr; page_free &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_system_config
</UL>

<P><STRONG><a name="[106]"></a>Debug_485</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dtu.o(i.Debug_485))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Debug_485 &rArr; s485_Uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_Uart_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStatePrint
</UL>

<P><STRONG><a name="[42]"></a>SMSConfigSystem_ack</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dtu.o(i.SMSConfigSystem_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SMSConfigSystem_ack &rArr; GprsGetInstance &rArr; gprs_t_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetInstance
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dtu.o(i.GprsDealSMSRun)
<LI> dtu.o(i.GprsEventHandleRun)
</UL>
<P><STRONG><a name="[100]"></a>DMA_GprsUart_Init</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, gprs_uart.o(i.DMA_GprsUart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_GprsUart_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_uart_init
</UL>

<P><STRONG><a name="[102]"></a>DMA_s485Uart_Init</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, serial485_uart.o(i.DMA_s485Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_s485Uart_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s485_uart_init
</UL>

<P><STRONG><a name="[225]"></a>spi_sendByteForRead</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, spi.o(i.spi_sendByteForRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_sendByteForRead
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[228]"></a>spi_write_word</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, spi.o(i.spi_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[f5]"></a>DMA1_Configuration</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, adc.o(i.DMA1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA1_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32adc
</UL>

<P><STRONG><a name="[e1]"></a>DealwithCollect</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, adc.o(i.DealwithCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DealwithCollect &rArr; Data_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_select
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_job
</UL>

<P><STRONG><a name="[e2]"></a>FinishCollect</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, adc.o(i.FinishCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FinishCollect &rArr; Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCValUpdate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_select
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_job
</UL>

<P><STRONG><a name="[19e]"></a>init_stm32adc</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, adc.o(i.init_stm32adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_stm32adc &rArr; DMA1_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_adc
</UL>

<P><STRONG><a name="[21f]"></a>series_se</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, adc.o(i.series_se))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = series_se
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_select
</UL>

<P><STRONG><a name="[103]"></a>sw_select</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, adc.o(i.sw_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sw_select &rArr; series_se
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;series_se
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinishCollect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealwithCollect
</UL>

<P><STRONG><a name="[19f]"></a>system_para_init</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, adc.o(i.system_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_adc
</UL>

<P><STRONG><a name="[237]"></a>w25q_ReadSR</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = w25q_ReadSR &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
</UL>

<P><STRONG><a name="[23d]"></a>w25q_read_id</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = w25q_read_id &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
</UL>

<P><STRONG><a name="[23a]"></a>w25q_wr_enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_wr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_write_waitbusy
</UL>

<P><STRONG><a name="[236]"></a>w25q_write_waitbusy</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, hw_w25q.o(i.w25q_write_waitbusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = w25q_write_waitbusy &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_erase
</UL>

<P><STRONG><a name="[1b6]"></a>flush_flash</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sw_filesys.o(i.flush_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write_Sector_Data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>

<P><STRONG><a name="[1ca]"></a>get_area</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sw_filesys.o(i.get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_area &rArr; check_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_malloc
</UL>

<P><STRONG><a name="[1c8]"></a>locate_page</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, sw_filesys.o(i.locate_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = locate_page
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
</UL>

<P><STRONG><a name="[70]"></a>mach_file</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sw_filesys.o(i.mach_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mach_file &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sw_filesys.o(i.filesys_init)
</UL>
<P><STRONG><a name="[1c1]"></a>page_free</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, sw_filesys.o(i.page_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = page_free &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
</UL>

<P><STRONG><a name="[1bd]"></a>page_malloc</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sw_filesys.o(i.page_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = page_malloc &rArr; read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_area
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
</UL>

<P><STRONG><a name="[1c6]"></a>rdFilearea_byfileinfo</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, sw_filesys.o(i.rdFilearea_byfileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rdFilearea_byfileinfo &rArr; read_page &rArr; w25q_Read_page_Data &rArr; w25q_rd_data &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[1b3]"></a>read_page</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sw_filesys.o(i.read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_page &rArr; w25q_Read_page_Data &rArr; w25q_rd_data &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_page_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filesys_mount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sarch_finleinfo_and_return_curpage
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdFilearea_byfileinfo
</UL>

<P><STRONG><a name="[1be]"></a>read_sector</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sw_filesys.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read_sector &rArr; flush_flash &rArr; w25q_Write_Sector_Data &rArr; w25q_Write &rArr; w25q_wr_enable &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_malloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_free
</UL>

<P><STRONG><a name="[1c5]"></a>sarch_finleinfo_and_return_curpage</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, sw_filesys.o(i.sarch_finleinfo_and_return_curpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sarch_finleinfo_and_return_curpage &rArr; read_page &rArr; w25q_Read_page_Data &rArr; w25q_rd_data &rArr; spi_write &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchfile
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[1bf]"></a>searchfile</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sw_filesys.o(i.searchfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = searchfile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_creator
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sarch_finleinfo_and_return_curpage
</UL>

<P><STRONG><a name="[1a0]"></a>Eliminate_the_space</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ttextconfprot.o(i.Eliminate_the_space))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firstarg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTTCP_begin
</UL>

<P><STRONG><a name="[1f4]"></a>Big_end_to_Little_end</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusrtu_cli.o(i.Big_end_to_Little_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Big_end_to_Little_end
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType3_write
</UL>

<P><STRONG><a name="[1f3]"></a>Little_end_to_Big_end</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusrtu_cli.o(i.Little_end_to_Big_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Little_end_to_Big_end
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType3_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regType4_read
</UL>

<P><STRONG><a name="[196]"></a>VecBuf_RecycleAFrame</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, bufmanager.o(i.VecBuf_RecycleAFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VecBuf_RecycleAFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecBuf_write
</UL>

<P><STRONG><a name="[186]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[187]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1e1]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[22a]"></a>rt_ms2tick</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[233]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[234]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[202]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[198]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[19b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
